From fe5ed7e8564818ac61bf23095b236ad2be1f3f70 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Thu, 22 Apr 2021 08:45:38 -0700
Subject: [PATCH] WIP: remove the use of tbb::task_scheduler_init it was
 removed from tbb 2021

* looks like it might be partially replaced with:
  https://www.threadingbuildingblocks.org/docs/help/reference/task_scheduler/tbb_global_control.html
  but that part wasn't implemented yet

Upstream-Status: Pending

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 src/NormalVectorsFilter.cpp | 15 +--------------
 1 file changed, 1 insertion(+), 14 deletions(-)

diff --git a/src/NormalVectorsFilter.cpp b/src/NormalVectorsFilter.cpp
index f43b19a8..e3327a3a 100644
--- a/src/NormalVectorsFilter.cpp
+++ b/src/NormalVectorsFilter.cpp
@@ -11,7 +11,6 @@
 #include <memory>
 #include <stdexcept>
 
-#include <tbb/task_scheduler_init.h>
 #include <tbb/tbb.h>
 
 #include <grid_map_core/grid_map_core.hpp>
@@ -64,8 +63,7 @@ bool NormalVectorsFilter<T>::configure() {
   // Read thread_number to set the number of threads to be used if parallelization is enebled,
   // if parameter is not found an error is thrown and the default is to set it to automatic.
   if (!filters::FilterBase<T>::getParam(std::string("thread_number"), threadCount_)) {
-    ROS_WARN("Could not find the parameter: `thread_number`. Setting to default value: 'automatic'.");
-    threadCount_ = tbb::task_scheduler_init::automatic;
+    ROS_ERROR("Could not find the parameter: `thread_number`.");
   }
   ROS_DEBUG("Thread_number = %d", threadCount_);
 
@@ -179,12 +177,6 @@ void NormalVectorsFilter<T>::computeWithAreaParallel(GridMap& map, const std::st
   const double start = ros::Time::now().toSec();
   grid_map::Size gridMapSize = map.getSize();
 
-  // Set number of thread to use for parallel programming.
-  std::unique_ptr<tbb::task_scheduler_init> TBBInitPtr;
-  if (threadCount_ != -1) {
-    TBBInitPtr.reset(new tbb::task_scheduler_init(threadCount_));
-  }
-
   // Parallelized iteration through the map.
   tbb::parallel_for(0, gridMapSize(0) * gridMapSize(1), [&](int range) {
     // Recover Cell index from range iterator.
@@ -292,11 +284,6 @@ void NormalVectorsFilter<T>::computeWithRasterParallel(GridMap& map, const std::
   const Index submapStartIndex(1, 1);
   const Index submapBufferSize(gridMapSize(0) - 2, gridMapSize(1) - 2);
   if (submapBufferSize(1)!=0) {
-    // Set number of thread to use for parallel programming
-    std::unique_ptr<tbb::task_scheduler_init> TBBInitPtr;
-    if (threadCount_ != -1) {
-      TBBInitPtr.reset(new tbb::task_scheduler_init(threadCount_));
-    }
     // Parallelized iteration through the map.
     tbb::parallel_for(0, submapBufferSize(0) * submapBufferSize(1), [&](int range) {
       const Index index(range / submapBufferSize(1) + submapStartIndex(0), range % submapBufferSize(1) + submapStartIndex(1));
